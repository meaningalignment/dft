datasource db {
  provider          = "postgres"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING_SHADOW") // used for migrations
  extensions        = [pgvector(map: "vector", schema: "extensions")] // Add the pgvector extension
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"] // Enable the postgresqlExtensions. Currently in preview
}

model User {
  id         Int          @id @default(autoincrement())
  email      String       @unique
  name       String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  role       String[]     @default(["USER"])
  chats      Chat[]
  votes      Vote[]
  upgrades   Upgrade[]
  Impression Impression[]
}

model EmailCodes {
  email              String   @unique
  loginCode          String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  loginCodeExpiresAt DateTime
  register           Boolean  @default(false)
  extraData          Json?
}

model ValuesCard {
  id                   Int                          @id @default(autoincrement())
  title                String
  instructionsShort    String
  instructionsDetailed String
  evaluationCriteria   String[]
  createdAt            DateTime                     @default(now())
  updatedAt            DateTime                     @updatedAt
  canonicalCardId      Int?
  chatId               String                       @unique
  chat                 Chat                         @relation(fields: [chatId], references: [id])
  canonicalCard        CanonicalValuesCard?         @relation(fields: [canonicalCardId], references: [id])
  embedding            Unsupported("vector(1536)")?
}

model CanonicalValuesCard {
  id                    Int                          @id @default(autoincrement())
  title                 String
  instructionsShort     String
  instructionsDetailed  String
  evaluationCriteria    String[]
  createdAt             DateTime                     @default(now())
  updatedAt             DateTime                     @updatedAt
  valuesCards           ValuesCard[]
  upgradesFrom          Upgrade[]                    @relation("FromValueRelation")
  upgradesTo            Upgrade[]                    @relation("ToValueRelation")
  Vote                  Vote[]
  embedding             Unsupported("vector(1536)")?
  Impression            Impression[]
  Chat                  Chat[]
  upgradeHypothesisFrom UpgradeHypothesis[]          @relation("FromHypothesizedValueRelation")
  upgradeHypothesisTo   UpgradeHypothesis[]          @relation("ToHypothesizedValueRelation")
}

model Chat {
  id                         String               @id
  userId                     Int
  transcript                 Json
  createdAt                  DateTime             @default(now())
  updatedAt                  DateTime             @updatedAt
  provisionalCard            Json? // A values card being formed in the background.
  provisionalCanonicalCardId Int? // A canonical values card that is linked in the background.
  ValuesCard                 ValuesCard?
  provisionalCanonicalCard   CanonicalValuesCard? @relation(fields: [canonicalValuesCardId], references: [id])
  user                       User                 @relation(fields: [userId], references: [id])
  canonicalValuesCardId      Int?
  articulatorPromptVersion   String               @default("OLD")
  articulatorPromptHash      String               @default("OLD")
  articulatorModel           String               @default("gpt-4-0613")
  gitCommitHash              String               @default("OLD")
}

model Vote {
  id           Int                 @id @default(autoincrement())
  userId       Int
  valuesCardId Int
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  drawId       String // uuid for each draw of 6 values to be voted on.
  valuesCard   CanonicalValuesCard @relation(fields: [valuesCardId], references: [id])
  user         User                @relation(fields: [userId], references: [id])
}

model Impression {
  id           Int                 @id @default(autoincrement())
  userId       Int
  drawId       String // uuid for each draw of 6 values to be voted on.
  valuesCardId Int
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  user         User                @relation(fields: [userId], references: [id])
  valuesCard   CanonicalValuesCard @relation(fields: [valuesCardId], references: [id])
}

model Upgrade {
  userId    Int
  fromId    Int
  toId      Int
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  user      User                @relation(fields: [userId], references: [id])
  from      CanonicalValuesCard @relation("FromValueRelation", fields: [fromId], references: [id])
  to        CanonicalValuesCard @relation("ToValueRelation", fields: [toId], references: [id])

  @@id([userId, fromId, toId])
}

model UpgradeHypothesis {
  fromId        Int
  toId          Int
  story         String
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  from          CanonicalValuesCard? @relation("FromHypothesizedValueRelation", fields: [fromId], references: [id])
  to            CanonicalValuesCard? @relation("ToHypothesizedValueRelation", fields: [toId], references: [id])
  gitCommitHash String               @default("OLD")

  @@id([fromId, toId])
}
